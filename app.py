# Features:
# - combine units (temporarily)
# - show the stats
# - word wrap
# - random malware popups
# - reset stats

# Imports
from tkinter import *
from tkinter import filedialog
from tkinter import simpledialog
from tkinter import messagebox
from tkinter import IntVar

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import main_support
from controller import *

# Autogenerated GUI code
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = GUI(root)
    main_support.init(root, top)
    root.mainloop()


w = None
def create_GUI(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = GUI (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_GUI():
    global w
    w.destroy()
    w = None


hardMode = False


class GUI:
    # Flash card functions
    def showPinyin(self, word, event=None):
        if (word):
            self.vocabWordLabel.configure(text=word.pinyin)
            vocabFont = "-family Georgia -size 32 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
            self.vocabWordLabel.configure(font=vocabFont)
    
    def showDef(self, word, event=None):
        if (word):
            self.vocabWordLabel.configure(text=word.definition)
            vocabFont = "-family Georgia -size 24 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
            self.vocabWordLabel.configure(font=vocabFont)

    def showChar(self, word, event=None):
        if (word):
            self.vocabWordLabel.configure(text=word.character)
            vocabFont = "-family Georgia -size 48 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
            self.vocabWordLabel.configure(font=vocabFont)

    def show(self, word, color, mode):
        self.vocabWordLabel.configure(foreground=color)
        
        if (mode == 'character'):
            self.showChar(word)
        elif (mode == 'pinyin'):
            self.showPinyin(word)
        elif (mode == 'definition'):
            self.showDef(word)
        return

    def cycleDisplay(self, event=None):
        mode = getActiveDisplayMode()
        if (mode == 'character'):
            setDisplayMode('pinyin')
            self.showPinyin()
        elif (mode == 'pinyin'):
            setDisplayMode('definition')
            self.showDef()
        elif (mode == 'definition'):
            setDisplayMode('character')
            self.showChar()
        return 'break' 

    def nextWord(self, event=None):
        countWordsTooEasy = 0
        newWord = False
        wordColorHexStr = False
        while True:
            newWord = getRandomWord()
            
            # Change word color based on how correct it is
            if (newWord.accessed == 0):
                rateCorrect = 0
                wordColorHexStr = '#000000'
            else:
                rateCorrect = float(newWord.correct) / newWord.accessed
                rateIncorrect = 1 - rateCorrect
                wordColorHexStr = '#%02x%02x%02x' % (int(rateIncorrect * 255), # red
                                                     int(rateCorrect * 255),   # green
                                                     100)                      # blue
                
            # Reject words we get right too often
            if (hardMode.get()):
                if (rateCorrect > hardModeCutoff):
                    countWordsTooEasy += 1
                else:
                    break
            else:
                break
            
            if (countWordsTooEasy > 1000):
                messagebox.showinfo("Get it girl!", "It looks like this unit is too easy for you -- we couldn't find a word with less than 2/3 correct rate!")
                root.mainloop()
                
        setActiveWord(newWord)
        mode = getActiveDisplayMode()
        self.show(newWord, wordColorHexStr, mode)


                
    ## Unit Menu
    def selectUnitOnRightClick(self, event):
        x = root.winfo_pointerx() - self.unitList.winfo_rootx()
        y = root.winfo_pointery() - self.unitList.winfo_rooty()
        posStr = "@"
        posStr = posStr + str(x) + "," + str(y)
        index = self.unitList.index(posStr)
        self.unitList.select_clear(0, END)
        self.unitList.select_set(index)
        self.unitList.activate(index)

    def showUnitMenu(self, event):
        try:
            self.unitMenu.tk_popup(event.x_root, event.y_root, 0)
        finally:
            self.unitMenu.grab_release()

    def changeUnitOnDoubleClick(self, event):
        makeUnitActive(self.unitList.get(ACTIVE))
        
    def promptNewUnit(self):
        unitName = simpledialog.askstring("New Unit!", "What's the name of the new unit?")
        root.withdraw()
        path = filedialog.askopenfilename()
        root.deiconify()

        # Create unit and add it to dictionary
        newUnit = unitFromXLSX(path)
        addUnit(unitName, newUnit)
        
        # Add unit's name to our list and show it
        self.unitList.insert(END, unitName)
        makeUnitActive(unitName)
        self.nextWord()

    # Note: Unit to be deleted should be bound as active    
    def deleteUnit(self, index):
        name = self.unitList.get(ACTIVE)
        delUnit(name)
        
        self.unitList.delete(ACTIVE)
        makeUnitActive()
        self.nextWord()

        

    ## Mode changing
    def activateDefMode(self):
        setDisplayMode('definition')
        self.pinyinModeButton.configure(relief=RAISED)
        self.charModeButton.configure(relief=RAISED)
        self.defModeButton.configure(relief=SUNKEN)
        word = getActiveWord()
        self.showDef(word)
    
    def activatePinyinMode(self):
        setDisplayMode('pinyin')
        self.defModeButton.configure(relief=RAISED)
        self.charModeButton.configure(relief=RAISED)
        self.pinyinModeButton.configure(relief=SUNKEN)
        word = getActiveWord()
        self.showPinyin(word)

    def activateCharMode(self):
        setDisplayMode('character')
        self.pinyinModeButton.configure(relief=RAISED)
        self.defModeButton.configure(relief=RAISED)
        self.charModeButton.configure(relief=SUNKEN)
        word = getActiveWord()
        self.showChar(word)

        

    ## Misc
    def correct(self, event):
        activeWord = getActiveWord()
        markCorrect(activeWord)
        self.nextWord()

    def incorrect(self, event):
        activeWord = getActiveWord()
        markIncorrect(activeWord)
        self.nextWord()

    def onClose(self):
        serialize()
        root.destroy()

        
    # Initialization    
    def __init__(self, top=None):
        global hardMode, units, firstUse
        
        # Init all static things (positions, colors) handled by PAGE
        font10 = "-family Georgia -size 9 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family Georgia -size 12 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        vocabFont = "-family Georgia -size 48 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        vocabCharFont = "-family Georgia -size 24 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("901x450+511+97")
        top.title("Chinese")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # Init all GUI elements
        self.unitList = Listbox(top)
        self.unitList.place(relx=0.01, rely=0.11, relheight=0.73, relwidth=0.33)
        self.unitList.configure(background="white")
        self.unitList.configure(disabledforeground="#a3a3a3")
        self.unitList.configure(font="TkFixedFont")
        self.unitList.configure(foreground="#000000")
        self.unitList.configure(highlightbackground="#d9d9d9")
        self.unitList.configure(highlightcolor="black")
        self.unitList.configure(selectbackground="#c4c4c4")
        self.unitList.configure(selectforeground="black")
        self.unitList.configure(width=294)

        self.unitMenu = Menu(self.unitList, tearoff=0)
        self.unitMenu.add_command(label="Delete",
                                    command=self.deleteUnit)
        self.unitMenu.add_command(label="Select All",
                                    command=self.deleteUnit)

        self.unitSelect = Label(top)
        self.unitSelect.place(relx=0.11, rely=0.02, height=26, width=102)
        self.unitSelect.configure(activebackground="#f9f9f9")
        self.unitSelect.configure(activeforeground="black")
        self.unitSelect.configure(background="#d9d9d9")
        self.unitSelect.configure(disabledforeground="#a3a3a3")
        self.unitSelect.configure(font=font9)
        self.unitSelect.configure(foreground="#000000")
        self.unitSelect.configure(highlightbackground="#d9d9d9")
        self.unitSelect.configure(highlightcolor="black")
        self.unitSelect.configure(text='''Select Unit''')

        self.newUnit = Button(top)
        self.newUnit.place(relx=0.01, rely=0.87, height=43, width=296)
        self.newUnit.configure(activebackground="#d9d9d9")
        self.newUnit.configure(activeforeground="#000000")
        self.newUnit.configure(background="#d9d9d9")
        self.newUnit.configure(borderwidth="3")
        self.newUnit.configure(disabledforeground="#a3a3a3")
        self.newUnit.configure(font=font9)
        self.newUnit.configure(foreground="#000000")
        self.newUnit.configure(highlightbackground="#d9d9d9")
        self.newUnit.configure(highlightcolor="black")
        self.newUnit.configure(pady="0")
        self.newUnit.configure(text='''Add New Unit''')

        self.vocabWordLabel = Label(top)
        self.vocabWordLabel.place(relx=0.46, rely=0.33, height=116, width=352)
        self.vocabWordLabel.configure(activebackground="#000080")
        self.vocabWordLabel.configure(activeforeground="white")
        self.vocabWordLabel.configure(activeforeground="#000000")
        self.vocabWordLabel.configure(background="#d9d9d9")
        self.vocabWordLabel.configure(disabledforeground="#a3a3a3")
        self.vocabWordLabel.configure(font=vocabFont)
        self.vocabWordLabel.configure(foreground="#000000")
        self.vocabWordLabel.configure(highlightbackground="#d9d9d9")
        self.vocabWordLabel.configure(highlightcolor="black")
        #self.vocabWordLabel.configure(wrap=WORD)
 

        self.pinyinModeButton = Button(top)
        self.pinyinModeButton.place(relx=0.59, rely=0.87, height=43, width=155)
        self.pinyinModeButton.configure(activebackground="#d9d9d9")
        self.pinyinModeButton.configure(activeforeground="#000000")
        self.pinyinModeButton.configure(background="#d9d9d9")
        self.pinyinModeButton.configure(borderwidth="3")
        self.pinyinModeButton.configure(disabledforeground="#a3a3a3")
        self.pinyinModeButton.configure(font=font10)
        self.pinyinModeButton.configure(foreground="#000000")
        self.pinyinModeButton.configure(highlightbackground="#d9d9d9")
        self.pinyinModeButton.configure(highlightcolor="black")
        self.pinyinModeButton.configure(padx="0")
        self.pinyinModeButton.configure(pady="0")
        self.pinyinModeButton.configure(text='''Pinyin Mode!''')

        self.defModeButton = Button(top)
        self.defModeButton.place(relx=0.79, rely=0.87, height=43, width=175)
        self.defModeButton.configure(activebackground="#d9d9d9")
        self.defModeButton.configure(activeforeground="#000000")
        self.defModeButton.configure(background="#d9d9d9")
        self.defModeButton.configure(borderwidth="3")
        self.defModeButton.configure(disabledforeground="#a3a3a3")
        self.defModeButton.configure(font=font10)
        self.defModeButton.configure(foreground="#000000")
        self.defModeButton.configure(highlightbackground="#d9d9d9")
        self.defModeButton.configure(highlightcolor="black")
        self.defModeButton.configure(padx="0")
        self.defModeButton.configure(pady="0")
        self.defModeButton.configure(text='''Definition Mode!''')

        self.charModeButton = Button(top)
        self.charModeButton.place(relx=0.39, rely=0.87, height=43, width=155)
        self.charModeButton.configure(activebackground="#d9d9d9")
        self.charModeButton.configure(activeforeground="#000000")
        self.charModeButton.configure(background="#d9d9d9")
        self.charModeButton.configure(borderwidth="3")
        self.charModeButton.configure(disabledforeground="#a3a3a3")
        self.charModeButton.configure(font=font10)
        self.charModeButton.configure(foreground="#000000")
        self.charModeButton.configure(highlightbackground="#d9d9d9")
        self.charModeButton.configure(highlightcolor="black")
        self.charModeButton.configure(padx="0")
        self.charModeButton.configure(pady="0")
        self.charModeButton.configure(text='''Character Mode!''')

        hardMode = IntVar(root)
        hardMode.set(0)
        self.toggleHardButton = Checkbutton(top)
        self.toggleHardButton.place(relx=0.88, rely=0.02, relheight=0.06, relwidth=0.12)
        self.toggleHardButton.configure(activebackground="#d9d9d9")
        self.toggleHardButton.configure(activeforeground="#000000")
        self.toggleHardButton.configure(background="#d9d9d9")
        self.toggleHardButton.configure(disabledforeground="#a3a3a3")
        self.toggleHardButton.configure(font=font10)
        self.toggleHardButton.configure(foreground="#000000")
        self.toggleHardButton.configure(highlightbackground="#d9d9d9")
        self.toggleHardButton.configure(highlightcolor="black")
        self.toggleHardButton.configure(justify=LEFT)
        self.toggleHardButton.configure(text='''Hard Mode''')
        self.toggleHardButton.configure(variable=hardMode)
        
        # Init all programmatic things
        top.bind('n', self.nextWord)
        top.bind('p', self.showPinyin)
        top.bind('d', self.showDef)
        top.bind('c', self.showChar)
        top.bind('<Return>', self.correct)
        top.bind('<Shift_R>', self.incorrect)
        top.bind('<space>', self.cycleDisplay)
        
        self.newUnit.configure(command=self.promptNewUnit)
        self.charModeButton.configure(command=self.activateCharMode)
        self.pinyinModeButton.configure(command=self.activatePinyinMode)
        self.defModeButton.configure(command=self.activateDefMode)
        self.unitList.bind('<Double-Button-1>', self.changeUnitOnDoubleClick)
        self.unitList.bind('<Button-3>', self.selectUnitOnRightClick)
        self.unitList.bind('<ButtonRelease-3>', self.showUnitMenu)
        
        self.activateCharMode() # Default show characters first

        root.protocol('WM_DELETE_WINDOW', self.onClose)

        # Load in data. If we can't find it, display welcome message
        try:
            state = deserialize()
            setUnits(state['units'])
            for name in state['units']:
                self.unitList.insert(END, name)
                
            makeUnitActive()
            self.nextWord()
        except:
            messagebox.showinfo("!", "Welcome to chinesemoon! A handmade flash card program, just for you!. How to use:\n 1. Load a unit from an excel spreadsheet. Make sure you just have the characters in column 1, pinyin in column 2, and definition in column 3.\n2. Add the spreadsheet as a unit.\n\nGreat! Now you have a unit of vocabulary to study! Press <space> to toggle between character, definition, and pinyin. Press 'p', 'd', or 'c' to flip directly to pinyin, definition, or character. When studying, press enter to mark a word as correct and press right shift to mark it incorrect. If you want to study without affecting your score, use 'n' to go to the next word.\n\n Words will show up on a spectrum of green to red, indicating what percentage of the time you get them correct. Check hard mode to only display words you get wrong more than 1/3 of the time!")

if __name__ == '__main__':
    vp_start_gui()
